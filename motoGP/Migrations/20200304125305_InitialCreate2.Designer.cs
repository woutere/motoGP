// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using motoGP.Data;

namespace motoGP.Migrations
{
    [DbContext(typeof(MotoGPcontext))]
    [Migration("20200304125305_InitialCreate2")]
    partial class InitialCreate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("motoGP.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CountryID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("motoGP.Models.Race", b =>
                {
                    b.Property<int>("RaceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Length");

                    b.Property<string>("Name");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("RaceID");

                    b.HasIndex("CountryID");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("motoGP.Models.Rider", b =>
                {
                    b.Property<int>("RiderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bike");

                    b.Property<int>("CountryID");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("Number");

                    b.Property<int>("TeamID");

                    b.HasKey("RiderId");

                    b.HasIndex("CountryID");

                    b.HasIndex("TeamID");

                    b.ToTable("Rider");
                });

            modelBuilder.Entity("motoGP.Models.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Logo");

                    b.Property<string>("Naam");

                    b.HasKey("TeamID");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("motoGP.Models.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresss");

                    b.Property<int>("CountryID");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("Paid");

                    b.Property<int>("RaceID");

                    b.HasKey("TicketID");

                    b.HasIndex("CountryID");

                    b.HasIndex("RaceID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("motoGP.Models.Race", b =>
                {
                    b.HasOne("motoGP.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("motoGP.Models.Rider", b =>
                {
                    b.HasOne("motoGP.Models.Country", "Country")
                        .WithMany("Riders")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("motoGP.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("motoGP.Models.Ticket", b =>
                {
                    b.HasOne("motoGP.Models.Country", "Country")
                        .WithMany("Tickets")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("motoGP.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
